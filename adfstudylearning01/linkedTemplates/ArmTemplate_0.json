{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfstudylearning01"
		},
		"ls_SqlServer01_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_SqlServer01'"
		},
		"ls_vvstorage01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_vvstorage01'"
		},
		"ls_SqlServer01_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqldatabasedemoserver01.database.windows.net"
		},
		"ls_SqlServer01_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SampleDB"
		},
		"ls_SqlServer01_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Study_By_Varun"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Append_Variable_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "PL_Append_Variable_01 example",
				"activities": [
					{
						"name": "Append variable",
						"description": "Append marks 90 into the existing mark array",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Marks",
							"value": {
								"value": "@int(90)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable",
						"description": "set variable marks 90 into the output to see the result",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Output",
							"value": {
								"value": "@variables('Marks')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Marks": {
						"type": "Array",
						"defaultValue": [
							89,
							50,
							50,
							70
						]
					},
					"Output": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Pipeline ACtivites"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Fail_activity_Examle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Pipeline faild intentionally ",
							"errorCode": "555"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Pipeline ACtivites"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Filter_example_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(pipeline().parameters.Filter_string)",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item(),'Car')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Filter_string": {
						"type": "string",
						"defaultValue": [
							"Volvo",
							"BMW Car",
							"Ford",
							"Mazda Car"
						]
					}
				},
				"folder": {
					"name": "Conditional and Loop Activities"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Indexing_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "access individual items actually from the array by using indexing",
				"activities": [
					{
						"name": "Set variable",
						"description": "set variable marks 90 into the output to see the result",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ADF output",
							"value": {
								"value": "@{variables('Marks')[0]}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Marks": {
						"type": "Array",
						"defaultValue": [
							89,
							50,
							50,
							70
						]
					},
					"ADF output": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Initial Concept"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Untill_Activity_example_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(variables('VarX')),10)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set temp value",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "temp",
										"value": {
											"value": "@variables('VarX')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set temp value",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "VarX",
										"value": {
											"value": "@string(add(int(variables('temp')),1))",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"VarX": {
						"type": "String",
						"defaultValue": "5"
					},
					"temp": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Conditional and Loop Activities"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Variable_example_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Simple basic example how to assign value to a variable ",
				"activities": [
					{
						"name": "Set variable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Var",
							"value": "10"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Var": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline ACtivites"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Variable_example_02')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Calculate area for rectangle",
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Area",
							"value": {
								"value": "@string(mul(int(variables('length')),int(variables('Breadth'))))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"length": {
						"type": "String",
						"defaultValue": "20"
					},
					"Breadth": {
						"type": "String",
						"defaultValue": "30"
					},
					"Area": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline ACtivites"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Variable_example_02_way2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Calculate area for rectangle",
				"activities": [
					{
						"name": "Calculate Area",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Lenght",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Breadth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Area",
							"value": {
								"value": "@string(mul(int(variables('length')),int(variables('Breadth'))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Lenght",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "length",
							"value": "10"
						}
					},
					{
						"name": "Set Breadth",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Breadth",
							"value": "5"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"length": {
						"type": "String"
					},
					"Breadth": {
						"type": "String"
					},
					"Area": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline ACtivites"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_if_else_aactivity_example_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(pipeline().parameters.Amount),10000)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable For 18",
									"description": "if amount less then 1000 then 18% ROI",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "RateofInterest",
										"value": "18"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable for 12",
									"description": "if amount less then 10000 then 12% ROI",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "RateofInterest",
										"value": "12"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Amount": {
						"type": "string"
					}
				},
				"variables": {
					"RateofInterest": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Conditional and Loop Activities"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_wait')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Pipeline ACtivites"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Variables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set varX changing",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varX",
							"value": "10"
						}
					},
					{
						"name": "set varZ",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "set varX changing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varZ",
							"value": {
								"value": "@{add(int(variables('varX')),int(variables('varY')))}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"varX": {
						"type": "String",
						"defaultValue": "5"
					},
					"varY": {
						"type": "String",
						"defaultValue": "20"
					},
					"varZ": {
						"type": "String",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "Pipeline ACtivites"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-18T11:47:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service connection for sql server for SampleDB database",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('ls_SqlServer01_properties_typeProperties_server')]",
					"database": "[parameters('ls_SqlServer01_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_SqlServer01_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_SqlServer01_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_vvstorage01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ls_vvstorage01",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_vvstorage01_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Delete')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_vvstorage01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "delete"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_vvstorage01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Destination_Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_vvstorage01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data FLow Transformations"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "destination"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "NameStyle",
						"type": "BOOLEAN"
					},
					{
						"name": "Title",
						"type": "UTF8"
					},
					{
						"name": "FirstName",
						"type": "UTF8"
					},
					{
						"name": "MiddleName",
						"type": "UTF8"
					},
					{
						"name": "LastName",
						"type": "UTF8"
					},
					{
						"name": "Suffix",
						"type": "UTF8"
					},
					{
						"name": "CompanyName",
						"type": "UTF8"
					},
					{
						"name": "SalesPerson",
						"type": "UTF8"
					},
					{
						"name": "EmailAddress",
						"type": "UTF8"
					},
					{
						"name": "Phone",
						"type": "UTF8"
					},
					{
						"name": "PasswordHash",
						"type": "UTF8"
					},
					{
						"name": "PasswordSalt",
						"type": "UTF8"
					},
					{
						"name": "rowguid",
						"type": "UTF8"
					},
					{
						"name": "ModifiedDate",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_vvstorage01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_vvstorage01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_vvstorage01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_vvstorage01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Sex",
						"type": "String"
					},
					{
						"name": "BP",
						"type": "String"
					},
					{
						"name": "Cholesterol",
						"type": "String"
					},
					{
						"name": "Na_to_K",
						"type": "String"
					},
					{
						"name": "Drug",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_vvstorage01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Source_Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_vvstorage01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data FLow Transformations"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_dept.csv",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_dept_name",
						"type": "String"
					},
					{
						"name": "emp_sal",
						"type": "String"
					},
					{
						"name": "emp_dept_no",
						"type": "String"
					},
					{
						"name": "emp_country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_vvstorage01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SqlServer_test_01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SqlServer01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_empl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_vvstorage01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "empl.csv",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "surname",
						"type": "String"
					},
					{
						"name": "dob",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_vvstorage01')]"
			]
		}
	]
}